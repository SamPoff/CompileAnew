A_	EQU 0061
B_	EQU 0062
C_	EQU 0063
D_	EQU 0064
E_	EQU 0065
F_	EQU 0066
G_	EQU 0067
H_	EQU 0068
I_	EQU 0069
J_	EQU 006a
K_	EQU 006b
L_	EQU 006c
M_	EQU 006d
N_	EQU 006e
O_	EQU 006f
P_	EQU 0070
Q_	EQU 0071
R_	EQU 0072
S_	EQU 0073
T_	EQU 0074
U_	EQU 0075
V_	EQU 0076
W_	EQU 0077
X_	EQU 0078
Y_	EQU 0079
Z_	EQU 007a
I2C_ADDR_PORT	EQU 0001
I2C_DATA_PORT	EQU 0002
I2C_CMD_PORT	EQU 0003
I2C_STATUS_PORT	EQU 0004
SW_ADDR_PORT	EQU 0005
SW_DATA_PORT	EQU 0006
READY_FLAG_	EQU 0001
TEMP_	EQU 0002
ADDRESS_	EQU 0003
DATA_	EQU 0004
CMD_	EQU 0005

			LOAD	R1, 0001
			STORE	R1, READY_FLAG_
			LOAD	R1, 0000
			STORE	R1, TEMP_
			LOAD	R1, 0000
			STORE	R1, ADDRESS_
			LOAD	R1, A_
			STORE	R1, DATA_
			LOAD	R1, 0000
			STORE	R1, CMD_

MAIN
			ENINT
			JUMP	LABEL1	;while loop check condition
LABEL0
LABEL1
			JUMP	LABEL0	;while loop


			ADDRESS 0300
ISR
			LOAD	R4, 0000
			STORE	R4, TEMP_
			LOAD	R4, 0000
			STORE	R4, ADDRESS_
			LOAD	R4, 0000
			STORE	R4, DATA_
			LOAD	R4, 0001
			STORE	R4, CMD_
			INPUT	R7, I2C_STATUS_PORT
			STORE	R7, TEMP_
			FETCH	R4, TEMP_
			COMP 	R4, 0001
			JUMPNZ	LABEL2	;if statement
			INPUT	R7, SW_ADDR_PORT
			STORE	R7, ADDRESS_
			FETCH	R7, ADDRESS_
			OUTPUT	R7, I2C_ADDR_PORT
			FETCH	R7, DATA_
			OUTPUT	R7, I2C_DATA_PORT
			FETCH	R7, CMD_
			OUTPUT	R7, I2C_CMD_PORT
LABEL2
			FETCH	R4, DATA_
			ADD 	R4, 0001
			STORE	R4, DATA_
			FETCH	R4, DATA_
			COMP 	R4, Z_
			JUMPNZ	LABEL3	;if statement
			LOAD	R4, A_
			STORE	R4, DATA_
LABEL3
			RETEN

			ADDRESS	0FFE

			JUMP	ISR

			END